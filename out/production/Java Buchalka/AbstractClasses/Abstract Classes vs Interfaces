-Abstract classes are similar to Interfaces. You cannot instantiate them, and they may contain a mix of methods
declared with or without implementation
-However, with abstract classes, you can declare fields that are not static and final,
and define public, protected and private concrete methods
-An abstract classes can extend only one parent class but it can implement multiple interfaces
-When an Abstract class is subclassed, the subclass usually provides implementations for
all of the abstract methods in its parent class
-However, if it does not, then the subclass must also be declared abstract

USE AN ABSTRACT CLASS WHEN
-You want to share code among several closely related classes(Animal - with field ame, age...)
-You expect classes that extend your abstract class to have many common methods or fields or required access modifiers
other than public(protected, private)
-You want to declare non static or non final fields(for example name, age), this enables you to define methods
that can access and modify the state of an object(getName, setName)
-When you have a requiement for your base class to provide a default implementation od certain methods
should be open to being overridden by child classes
-Summary: The purpose of an Abstract classes is to provide a common definition of a base class that multiple derived classes can share


INTERFACES
-An interface is just the declaration of methods of an class, it;s not the implementation
-In an Interface, we define what kind of operation an object can perform. These operations are defined by the classes that implement the Interface
-Interfaces form a contract between the cless and the outside world, and this contract is enforced at build time by the compiler
-You cannot instantiate them, and they may contain a mix of methods declared with or without an implementation.
All methods in interfaces are automatically public and anstract
-An interface can extan another interface
-Interfaces are more flexible and can deal with a lot more stress on the design of your program than the implementation
-By introduction interfaces into your program, you are really introduce points of variation
at which you can plug in different implementations for that interface. An interfaces primary
purpose is abstraction, decoupling the what from how
-NOTE: Since Java 8 interfaces can contain default methods. In other words methods with implementaion.
The keyword default is used(mostly for backwards compatibility), and static methods as well before Java 8 that was not possible
-NOTE: Since Java 9 an Interface can also contain private methods(commonly udes when two default methods in an Interface share
common code)

USE AN INTERFACE WHEN
-You expect that unrelated classes will implement your interface. For example, the interfaces Comparable and
Cloneaable are iplemented by many unrelated classes
-You want to specify the behaviour of a particular data type, but you are not concerned about who implements its behaviour
-You want seperate different behavior
-The Collections API is an exellent example, we have the List interface and implementations ArrayList and LinedList
-The JDBC API is another excelent example. It exist of almost only interfaces. The concrete implementations are provided as "JDBC drivers"
This enables you to write all the JDBC code independent of the database (DB) vendor.